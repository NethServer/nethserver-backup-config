#!/usr/bin/perl

#
# Copyright (C) 2020 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use warnings;
use strict;
use esmith::NetworksDB;
use esmith::ConfigDB;

my $ndb = esmith::NetworksDB->open();

my $net_backup = "/var/lib/nethserver/db/networks.preserve";

if (grep(/^--skip-network$/, @ARGV)) {

    if ( -f $net_backup ) {
        # This is the database to preserve
        my $old_ndb = esmith::NetworksDB->open($net_backup);

        # Migrate restored records to the backup copy
        foreach my $item ($ndb->get_all()) {
            my $key = $item->key;
            my $type = $item->prop('type');

            # Skip all network interfaces
            next if ($type =~ m/^(ethernet|bridge|bond|slave|vlan|alias|xdsl|xdsl-disabled)$/);

            # Create the item if not exists, otherwise just merge the props
            my $new_item = $old_ndb->get($key) || $old_ndb->new_record($key, { type => $type});
            $new_item->merge_props($item->props);
        }

        # Flush changes to disk
        $old_ndb->reload();

        # Restore the previous networks db
        rename($net_backup, "/var/lib/nethserver/db/networks");

    } else {
        print "[WARNING] Network could not be preserved: '$net_backup' not found\n";
    }
}
