#! /usr/bin/perl -w
#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::ConfigDB;
use NethServer::BackupConfig;
use NethServer::TrackerClient;


my $bkp_file=$ARGV[0];

my $status;

my $backup = new NethServer::BackupConfig();

my $tracker = NethServer::TrackerClient->new();

if (not defined $bkp_file) { print "Fatal Error: No backup file specified! \n"; exit 0; };

my %tasks = ();
$tasks{'extract'} = $tracker->declare_task('Extracting backup', 0.05);
$tasks{'pre'} = $tracker->declare_task('Preparing restore', 0.05);
$tasks{'execute'} = $tracker->declare_task('Executing restore', 0.1);
$tasks{'post'} = $tracker->declare_task('Reconfiguring system', 8.0);

$backup->set_log_file("/var/log/restore-config.log");

$backup->logger("START","Restore config started");
print "START: Restore config started \n";

if ( ! -f NethServer::BackupConfig::DESTINATION_DIR.$bkp_file ) {
    $ENV{'PTRACK_TASKID'} = $tasks{'extract'};
    $tracker->set_task_progress($tasks{'pre'}, 0.1, 'Extract');
    my $conf = esmith::ConfigDB->open || die("Could not open config db\n");
    my $bd = $conf->get('backup-data');
    my $program = $bd->prop('Program') || 'duplicity';
    if ($status = system("/etc/e-smith/events/actions/restore-config-$program ".NethServer::BackupConfig::DESTINATION_DIR.$bkp_file)) {
        $tracker->set_task_done($tasks{'extract'}, "No configuration backup file found or can't extract from data backup", 1);
        print "No configuration backup file found or can't extract from data backup \n";
        $backup->bad_exit("No configuration backup file found or can't extract from data backup");
    }
}
$tracker->set_task_done($tasks{'extract'}, 0);

$ENV{'PTRACK_TASKID'} = $tasks{'pre'};
$tracker->set_task_progress($tasks{'pre'}, 0.1, 'Pre-restore');
if ($status = system("/sbin/e-smith/signal-event pre-restore-config"))
{
    $tracker->set_task_done($tasks{'extract'}, "Event pre-restore-config failed", 1);
    print "Event: pre-restore-config failed \n";
    $backup->bad_exit("Event pre-restore-config failed", $status);
}
$tracker->set_task_done($tasks{'pre'}, '', 0);
$backup->logger("STEP","pre-restore-config done");
print "STEP: pre-restore-config done \n";

$tracker->set_task_progress($tasks{'execute'}, 0.1, 'Restore');
if ($status = system("/etc/e-smith/events/actions/restore-config-execute ".$bkp_file))
{
    $tracker->set_task_done($tasks{'execute'}, "Action restore-config-execute failed", 1);
    print "Action: restore-config-execute failed \n";
    $backup->bad_exit("Action restore-config-execute failed", $status);
}
$tracker->set_task_done($tasks{'execute'}, '', 0);
$backup->logger("STEP","restore-config-execute done");
print "STEP: restore-config-execute done \n";

$ENV{'PTRACK_TASKID'} = $tasks{'post'};
$tracker->set_task_progress($tasks{'post'}, 0.1, 'Post-restore');
if ($status = system("/sbin/e-smith/signal-event post-restore-config"))
{
    $tracker->set_task_done($tasks{'post'}, "Event post-restore-config failed", 1);
    print "Event: post-restore-config failed \n";
    $backup->bad_exit("Event post-restore-config failed", $status);
}
$tracker->set_task_done($tasks{'post'}, '', 0);

$backup->logger("SUCCESS","Restore config done");
print "SUCCESS: Restore of ".$bkp_file." config done \n";

exit 0;
