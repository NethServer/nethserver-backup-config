#! /usr/bin/perl -w
#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::ConfigDB;
use NethServer::BackupConfig;
use NethServer::TrackerClient;
use Getopt::Long;

my $reinstall = 1;
my @mask_units;
my @remap_interfaces;

# The --reinstall option does not take an argument and may be negated
# by prefixing it with "no" or "no-": --no-reinstall --noreinstall
GetOptions(
    'reinstall!' => \$reinstall,
    'mask-unit=s' => \@mask_units,
    'remap-interfaces=s@' => \@remap_interfaces # comma separated list
);

@remap_interfaces = split(/,/,join(',',@remap_interfaces));

my $status;

my $backup = new NethServer::BackupConfig();

my $tracker = NethServer::TrackerClient->new();

my %tasks = ();

$tasks{'extract'} = $tracker->declare_task('Extracting backup', 0.05);
$tasks{'pre'} = $tracker->declare_task('Preparing restore', 0.05);
$tasks{'execute'} = $tracker->declare_task('Executing restore', 0.1);
if ($reinstall) {
    $tasks{'reinstall'} = $tracker->declare_task('Reinstalling packages', 0.1);
}
$tasks{'post'} = $tracker->declare_task('Reconfiguring system', 8.0);

out("Restore config started");

if ( ! -f $backup->get_destination() ) {
    $ENV{'PTRACK_TASKID'} = $tasks{'extract'};
    $tracker->set_task_progress($tasks{'pre'}, 0.1, 'Extract');
    my $conf = esmith::ConfigDB->open || die("Could not open config db\n");
    my $bd = $conf->get('backup-data') || die("Could not open backup data to retrieve configuration backup");
    my $program = $bd->prop('Program') || 'duplicity';
    if ($status = system("/etc/e-smith/events/actions/restore-config-$program ".$backup->get_destination())) {
        $tracker->set_task_done($tasks{'extract'}, "No configuration backup file found or can't extract from data backup", 1);
        error("No configuration backup file found or can't extract from data backup");
    }
}
$tracker->set_task_done($tasks{'extract'}, 0);

$ENV{'PTRACK_TASKID'} = $tasks{'pre'};
$tracker->set_task_progress($tasks{'pre'}, 0.1, 'Pre-restore');
if ($status = system("/sbin/e-smith/signal-event pre-restore-config"))
{
    $tracker->set_task_done($tasks{'extract'}, "Event pre-restore-config failed", 1);
    error("Event pre-restore-config: FAIL");
}
$tracker->set_task_done($tasks{'pre'}, '', 0);
out("Event pre-restore-config: SUCCESS");

$tracker->set_task_progress($tasks{'execute'}, 0.1, 'Restore');
if ($status = system("/etc/e-smith/events/actions/restore-config-execute"))
{
    $tracker->set_task_done($tasks{'execute'}, "Action restore-config-execute failed", 1);
    error("Action restore-config-execute: FAIL");
}
$tracker->set_task_done($tasks{'execute'}, '', 0);
out("Action restore-config-execute: SUCCESS");


if ($reinstall) {
    $tracker->set_task_progress($tasks{'reinstall'}, 0.1, 'Reinstalling packages');
    if ($status = system("/etc/e-smith/events/actions/restore-config-reinstall"))
    {
        $tracker->set_task_done($tasks{'reinstall'}, "Action restore-config-reinstall: FAIL");
        # do not break in case of error, keep goining with the post-restore-config
    }
    out("Action restore-config-reinstall: SUCCESS");
}

$ENV{'PTRACK_TASKID'} = $tasks{'post'};
$tracker->set_task_progress($tasks{'post'}, 0.1, 'Post-restore');
system('/usr/bin/systemctl', 'mask', '--runtime', @mask_units);
$status = system("/sbin/e-smith/signal-event", "post-restore-config", @remap_interfaces);
system('/usr/bin/systemctl', 'unmask', '--runtime', @mask_units);
if($status != 0) {
    $tracker->set_task_done($tasks{'post'}, "Event post-restore-config failed", 1);
    error("Event post-restore-config: FAIL");
}
$tracker->set_task_done($tasks{'post'}, '', 0);

out("Event post-restore-config: SUCCESS");

exit 0;

sub out {
    my $msg = shift;
    print sprintf("$msg\n",@_);
}

sub error {
    out(@_);
    out("Restore status: FAIL");
    exit 1;
}

