#! /usr/bin/perl -w
#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::ConfigDB;
use NethServer::BackupConfig;
use NethServer::TrackerClient;
use POSIX qw/strftime/;

my $conf = esmith::ConfigDB->open || die("Could not open config db\n");
my $backup = $conf->get('backup-config');
my $status = $backup->prop('status') || 'disabled';
# valid values for notify are: always, error, never
my $notify = $backup->prop('notify') || 'error';
my $notify_to = $backup->prop('notifyTo') || 'root';
my $notify_from = $backup->prop('notifyFrom') || 'root';
my $msg = '';

exit 0 unless ($status eq 'enabled');

$backup = new NethServer::BackupConfig($notify, $notify_to, $notify_from);
my $tracker = NethServer::TrackerClient->new();

my %tasks = ();
$tasks{'pre'} = $tracker->declare_task('Preparing backup');
$tasks{'execute'} = $tracker->declare_task('Executing backup');
$tasks{'post'} = $tracker->declare_task('Cleaning up system');

$backup->cleanup_notification();
$backup->notify("===== Report for configuration backup =====\n");

my $start = time;
$backup->logger("START","Backup config started");
$backup->notify("Backup started at %s", strftime('%F %T',localtime));

$ENV{'PTRACK_TASKID'} = $tasks{'pre'};
$tracker->set_task_progress($tasks{'pre'}, 0.1, 'Pre-backup');
if ($status = system(qw(/sbin/e-smith/signal-event pre-backup-config)))
{
    $msg = "Event pre-backup-config failed"; 
    $backup->notify("Pre backup scripts status: ERROR");
    $tracker->set_task_done($tasks{'pre'}, $msg, 1);
    $backup->bad_exit($msg, $status>>8);
}
$backup->logger("STEP","pre-backup-config done");
$tracker->set_task_done($tasks{'pre'}, '', 0);
$backup->notify("Pre backup scripts status: SUCCESS");

$tracker->set_task_progress($tasks{'execute'}, 0.1, 'Execute');
if ($status = system("/etc/e-smith/events/actions/backup-config-execute"))
{
    $msg = "Action backup-config-execute failed";
    $backup->notify("Backup script status: ERROR");
    $tracker->set_task_done($tasks{'execute'}, $msg, 1);
    $backup->bad_exit($msg, $status>>8);
}
$backup->logger("STEP","backup-config-execute done");
$tracker->set_task_done($tasks{'execute'}, '', 0);
$backup->notify("Backup script status: SUCCESS");

$ENV{'PTRACK_TASKID'} = $tasks{'post'};
$tracker->set_task_progress($tasks{'post'}, 0.1, 'Post-backup');
if ($status = system(qw(/sbin/e-smith/signal-event post-backup-config)))
{
    $msg = "Event post-backup-config failed";
    $backup->notify("Post backup scripts status: ERROR");
    $tracker->set_task_done($tasks{'post'}, $msg, 1);
    $backup->bad_exit($msg, $status>>8);
}
$backup->notify("Post backup scripts status: SUCCESS");
$tracker->set_task_done($tasks{'post'}, '', 0);

$backup->logger("SUCCESS","Backup config done");
$backup->notify("Backup status: SUCCESS");
$backup->notify("Backup ended at %s", strftime('%F %T',localtime));
my $duration = time - $start;
$backup->notify("Time elapsed: %s hours, %s minutes, %s seconds", ($duration/(60*60))%24, ($duration/60)%60, $duration%60);

$backup->send_notification();

exit 0;
