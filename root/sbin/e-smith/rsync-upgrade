#!/bin/bash
#
# Copyright (C) 2017 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#
#
# This script connect to a remoe host and synchronize all data
# to the local machine.
#
# Usage example:
#     nethservice.nethesis.it 2222
#

function help
{
    echo "Usage: $0 [-u] <host> <ssh_port>"
    echo
    echo "       -h    Display this help message."
    echo "       -u    Stop services on the source machine and perform the upgrade."
    echo
    exit 0
}

_term() {
    rm -f $include_f
    rm -f $exclude_f
}

sync_only=1

while getopts ":h:u" opt; do
  case ${opt} in
    h )
      help
      ;;
    u )
      sync_only=0
      ;;
    \? )
      echo "Invalid Option: -$OPTARG" 1>&2
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

target=$1
port=${2:-22}

if [ -z $target ]; then
    help
fi

trap _term SIGINT SIGTERM EXIT

# Checking dependencies
rpm -q nethserver-backup-data >/dev/null
if [ $? -gt 0 ]; then
    yum install nethserver-backup-data -y
fi



# Prepare temp files
ssh_keys=/root/.ssh/id_rsa
include_f=$(mktemp --suffix=.include)
exclude_f=$(mktemp --suffix=.exclude)
hostname=$(hostname -f)


ssh_options=" -o UserKnownHostsFile=/dev/null -o ControlMaster=auto -o ControlPath=~/.ssh/master-%r@%h:%p -o ControlPersist=1h -o StrictHostKeyChecking=no -c blowfish -p $port -i $ssh_keys"
ssh_cmd="ssh $ssh_options"

if [ ! -f /root/.ssh/id_rsa ]; then
    ssh-keygen -f $ssh_keys -t rsa -N ''
    ssh-copy-id "root@$target -p $port"
fi


if [ $sync_only -eq 0 ]; then
     # Prepare the remote machine
     echo "Disabling access to services..."
     $ssh_cmd root@$target 'shorewall stop'
     echo "Creating configuration backup on $target..."
     $ssh_cmd root@$target '/sbin/e-smith/backup-config'
     echo "Executing pre-backup-data on $target..."
     $ssh_cmd root@$target '/sbin/e-smith/signal-event pre-backup-data'
else
     echo
     echo "Sync-only mode enabled: no action will be perfomed on the remote machine"
     echo
fi

# Retrieve the list of files to be copied and excluded
$ssh_cmd root@$target 'for f in /etc/backup-data.d/*.include; do cat $f; echo; done | sort | uniq | sed '/^$/d'' > $include_f
$ssh_cmd root@$target 'for f in /etc/backup-data.d/*.exclude; do cat $f; echo; done | sort | uniq | sed '/^$/d'' > $exclude_f

# Do not sync .ssh to not lose ssh config
if [ $sync_only -eq 1 ]; then
    echo "/root/.ssh" >> $exclude_f
fi

# Avoid deleting backup history directory
echo "/var/lib/nethserver/backup/history" >> $exclude_f

# Execute the sync
rsync -azvr --delete --files-from=$include_f --exclude-from=$exclude_f -e "$ssh_cmd" root@$target:/ /

echo
echo "Synchronization finished!"

if [ $sync_only -eq 0 ]; then
    echo
    echo "Completing migration ..."
    echo "Executing post-restore-config ..."
    /sbin/e-smith/restore-config

    echo
    echo "Please access the web interface and fix network configuration."
    echo "Then, return to the shell and execute:"
    echo
    echo "     signal-event post-restore-data"
    echo
    echo "WARNING: do not reboot the system before executing the above command!"
    echo
fi
